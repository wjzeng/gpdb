--
-- Test case errors out when we define aggregates without preliminary functions and use it as an aggregate derived window function.
--
create schema bfv_olap;
set search_path=bfv_olap;
-- SETUP
-- start_ignore
drop table if exists toy;
NOTICE:  table "toy" does not exist, skipping
drop aggregate if exists mysum1(int4);
NOTICE:  aggregate mysum1(int4) does not exist, skipping
drop aggregate if exists mysum2(int4);
NOTICE:  aggregate mysum2(int4) does not exist, skipping
-- end_ignore
create table toy(id,val) as select i,i from generate_series(1,5) i;
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column(s) named 'id' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
create aggregate mysum1(int4) (sfunc = int4_sum, prefunc=int8pl, stype=bigint);
create aggregate mysum2(int4) (sfunc = int4_sum, stype=bigint);
-- TEST
select id, val, sum(val) over (w), mysum1(val) over (w), mysum2(val) over (w) from toy window w as (order by id rows 2 preceding);
ERROR:  aggregate functions with no prelimfn or invprelimfn are not yet supported as window functions
-- CLEANUP
-- start_ignore
drop aggregate if exists mysum1(int4);
drop aggregate if exists mysum2(int4);
drop table if exists toy;
-- end_ignore
--
-- Test case errors out when we define aggregates without preliminary functions and use it as an aggregate derived window function.
--
-- SETUP
-- start_ignore
drop type if exists ema_type cascade;
NOTICE:  type "ema_type" does not exist, skipping
drop function if exists ema_adv(t ema_type, v float, x float) cascade;
ERROR:  type "ema_type" does not exist
drop function if exists ema_fin(t ema_type) cascade;
ERROR:  type "ema_type" does not exist
drop aggregate if exists ema(float, float);
NOTICE:  aggregate ema(pg_catalog.float8,pg_catalog.float8) does not exist, skipping
drop table if exists ema_test cascade;
NOTICE:  table "ema_test" does not exist, skipping
-- end_ignore
create type ema_type as (x float, e float);
create function ema_adv(t ema_type, v float, x float)
    returns ema_type
    as $$
        begin
            if t.e is null then
                t.e = v;
                t.x = x;
            else
                if t.x != x then
                    raise exception 'ema smoothing x may not vary';
                end if;
                t.e = t.e + (v - t.e) * t.x;
            end if;
            return t;
        end;
    $$ language plpgsql;
create function ema_fin(t ema_type)
    returns float
    as $$
       begin
           return t.e;
       end;
    $$ language plpgsql;
create aggregate ema(float, float) (
    sfunc = ema_adv,
    stype = ema_type,
    finalfunc = ema_fin,
    initcond = '(,)');
create table ema_test (k int, v float ) distributed by (k);
insert into ema_test select i, 4*random() + 10.0*(1+cos(radians(i*5))) from generate_series(0,19) i(i);
-- TEST
select k, v, ema(v, 0.9) over (order by k rows between unbounded preceding and current row) from ema_test order by k;
ERROR:  aggregate functions with no prelimfn or invprelimfn are not yet supported as window functions
-- CLEANUP
-- start_ignore
drop table if exists ema_test cascade;
drop aggregate if exists ema(float, float);
drop function if exists ema_fin(t ema_type) cascade;
drop function if exists ema_adv(t ema_type, v float, x float) cascade;
drop type if exists ema_type cascade;
-- end_ignore
--
-- Test case errors out when we define aggregates without preliminary functions and use it as an aggregate derived window function.
--
-- SETUP
-- start_ignore
drop type if exists ema_type cascade;
NOTICE:  type "ema_type" does not exist, skipping
drop function if exists ema_adv(t ema_type, v float, x float) cascade;
ERROR:  type "ema_type" does not exist
drop function if exists ema_fin(t ema_type) cascade;
ERROR:  type "ema_type" does not exist
drop aggregate if exists ema(float, float);
NOTICE:  aggregate ema(pg_catalog.float8,pg_catalog.float8) does not exist, skipping
drop table if exists ema_test cascade;
NOTICE:  table "ema_test" does not exist, skipping
-- end_ignore
create type ema_type as (x float, e float);
create function ema_adv(t ema_type, v float, x float)
    returns ema_type
    as $$
        begin
            if t.e is null then
                t.e = v;
                t.x = x;
            else
                if t.x != x then
                    raise exception 'ema smoothing x may not vary';
                end if;
                t.e = t.e + (v - t.e) * t.x;
            end if;
            return t;
        end;
    $$ language plpgsql;
create function ema_fin(t ema_type)
    returns float
    as $$
       begin
           return t.e;
       end;
    $$ language plpgsql;
create aggregate ema(float, float) (
    sfunc = ema_adv,
    stype = ema_type,
    finalfunc = ema_fin,
    initcond = '(,)');
create table ema_test (k int, v float ) distributed by (k);
insert into ema_test select i, 4*random() + 10.0*(1+cos(radians(i*5))) from generate_series(0,19) i(i);
-- TEST
select k, v, ema(v, 0.9) over (order by k) from ema_test order by k;
ERROR:  aggregate functions with no prelimfn or invprelimfn are not yet supported as window functions
-- CLEANUP
-- start_ignore
drop table if exists ema_test cascade;
drop aggregate if exists ema(float, float);
drop function if exists ema_fin(t ema_type) cascade;
drop function if exists ema_adv(t ema_type, v float, x float) cascade;
drop type if exists ema_type cascade;
-- end_ignore
--
-- Test with/without group by
--
-- SETUP
-- start_ignore
DROP TABLE IF EXISTS r;
NOTICE:  table "r" does not exist, skipping
-- end_ignore
CREATE TABLE r
(
    a INT NOT NULL, 
    b INT, 
    c CHARACTER VARYING(200),  
    d NUMERIC(10,0), 
    e DATE
) DISTRIBUTED BY (a,b);
ALTER TABLE r ADD CONSTRAINT PKEY PRIMARY KEY (b);
NOTICE:  updating distribution policy to match new primary key
NOTICE:  ALTER TABLE / ADD PRIMARY KEY will create implicit index "r_pkey" for table "r"
--TEST
SELECT MAX(a) AS m FROM r GROUP BY b ORDER BY m;
 m 
---
(0 rows)

SELECT MAX(a) AS m FROM r GROUP BY a ORDER BY m;
 m 
---
(0 rows)

SELECT MAX(a) AS m FROM r GROUP BY b;
 m 
---
(0 rows)

 
-- CLEANUP
-- start_ignore
DROP TABLE IF EXISTS r;
-- end_ignore
--
-- ORDER BY clause includes some grouping column or not
--
-- SETUP
-- start_ignore
DROP TABLE IF EXISTS r;
NOTICE:  table "r" does not exist, skipping
-- end_ignore
CREATE TABLE r
(
    a INT NOT NULL, 
    b INT, 
    c CHARACTER VARYING(200),  
    d NUMERIC(10,0), 
    e DATE
) DISTRIBUTED BY (a,b);
ALTER TABLE r ADD CONSTRAINT PKEY PRIMARY KEY (b);
NOTICE:  updating distribution policy to match new primary key
NOTICE:  ALTER TABLE / ADD PRIMARY KEY will create implicit index "r_pkey" for table "r"
--TEST
SELECT MAX(a) AS m FROM R GROUP BY b ORDER BY m,b;
 m 
---
(0 rows)

SELECT MAX(a) AS m FROM R GROUP BY b,e ORDER BY m,b,e;
 m 
---
(0 rows)

SELECT MAX(a) AS m FROM R GROUP BY b,e ORDER BY m;
 m 
---
(0 rows)

-- CLEANUP
-- start_ignore
DROP TABLE IF EXISTS r;
-- end_ignore
--
-- ORDER BY 1 or more columns
--
-- SETUP
-- start_ignore
DROP TABLE IF EXISTS r;
NOTICE:  table "r" does not exist, skipping
-- end_ignore
CREATE TABLE r
(
    a INT NOT NULL, 
    b INT, 
    c CHARACTER VARYING(200),  
    d NUMERIC(10,0), 
    e DATE
) DISTRIBUTED BY (a,b);
ALTER TABLE r ADD CONSTRAINT PKEY PRIMARY KEY (b);
NOTICE:  updating distribution policy to match new primary key
NOTICE:  ALTER TABLE / ADD PRIMARY KEY will create implicit index "r_pkey" for table "r"
--TEST
SELECT MAX(a),d,e AS m FROM r GROUP BY b,d,e ORDER BY m,e,d;
 max | d | m 
-----+---+---
(0 rows)

SELECT MIN(a),d,e AS m FROM r GROUP BY b,e,d ORDER BY e,d;
 min | d | m 
-----+---+---
(0 rows)

SELECT MAX(a) AS m FROM r GROUP BY b,c,d,e ORDER BY e,d;
 m 
---
(0 rows)

SELECT MAX(a) AS m FROM r GROUP BY b,e ORDER BY e;
 m 
---
(0 rows)

SELECT MAX(e) AS m FROM r GROUP BY b ORDER BY m;
 m 
---
(0 rows)

-- CLEANUP
-- start_ignore
DROP TABLE IF EXISTS r;
-- end_ignore
--
-- ORDER BY clause includes some grouping column or not
--
-- SETUP
-- start_ignore
DROP TABLE IF EXISTS dm_calendar;
NOTICE:  table "dm_calendar" does not exist, skipping
-- end_ignore
CREATE TABLE dm_calendar (
    calendar_id bigint NOT NULL,
    date_name character varying(200),
    date_name_cn character varying(200),
    calendar_date date,
    current_day numeric(10,0),
    month_id numeric(10,0),
    month_name character varying(200),
    month_name_cn character varying(200),
    month_name_short character varying(200),
    month_name_short_cn character varying(200),
    days_in_month numeric(10,0),
    first_of_month numeric(10,0),
    last_month_id numeric(10,0),
    month_end numeric(10,0),
    quarter_id numeric(10,0),
    quarter_name character varying(200),
    quarter_name_cn character varying(200),
    quarter_name_short character varying(200),
    quarter_name_short_cn character varying(200),
    year_id numeric(10,0),
    year_name character varying(200),
    year_name_cn character varying(200),
    description character varying(500),
    create_date timestamp without time zone,
    month_week_num character varying(100),
    month_week_begin character varying(100),
    month_week_end character varying(100),
    half_year character varying(100),
    weekend_flag character varying(100),
    holidays_flag character varying(100),
    workday_flag character varying(100),
    month_number numeric(10,0)
) DISTRIBUTED BY (calendar_id);
ALTER TABLE ONLY dm_calendar ADD CONSTRAINT dm_calendar_pkey PRIMARY KEY (calendar_id);
NOTICE:  ALTER TABLE / ADD PRIMARY KEY will create implicit index "dm_calendar_pkey" for table "dm_calendar"
--TEST
SELECT "year_id" as id , min("year_name") as a  from (select "year_id" as "year_id" , min("year_name") as "year_name" from  "dm_calendar" group by "year_id") "dm_calendar3" group by "year_id" order by a ASC ;
 id | a 
----+---
(0 rows)

-- CLEANUP
-- start_ignore
DROP TABLE IF EXISTS dm_calendar;
-- end_ignore
--
-- Test with/without group by with primary key as dist key
--
-- SETUP
-- start_ignore
drop table if exists t;
NOTICE:  table "t" does not exist, skipping
-- end_ignore
create table t
(
    a int NOT NULL,
    b int,
    c character varying(200),
    d numeric(10,0),
    e date
) distributed by (b);
alter table t ADD CONSTRAINT pkey primary key (b);
NOTICE:  ALTER TABLE / ADD PRIMARY KEY will create implicit index "t_pkey" for table "t"
-- TEST
SELECT MAX(a) AS m FROM t GROUP BY b ORDER BY m;
 m 
---
(0 rows)

-- CLEANUP
-- start_ignore
drop table if exists t;
-- end_ignore
--
-- Passing through distribution matching type in default implementation
--
-- SETUP
-- start_ignore
drop table if exists customer;
NOTICE:  table "customer" does not exist, skipping
drop table if exists sale;
NOTICE:  table "sale" does not exist, skipping
-- end_ignore
create table customer
(
	cn int not null,
	cname text not null,
	cloc text,
	primary key (cn)
) distributed by (cn);
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "customer_pkey" for table "customer"
insert into customer values
  ( 1, 'Macbeth', 'Inverness'),
  ( 2, 'Duncan', 'Forres'),
  ( 3, 'Lady Macbeth', 'Inverness'),
  ( 4, 'Witches, Inc', 'Lonely Heath');
create table sale
(
	cn int not null,
	vn int not null,
	pn int not null,
	dt date not null,
	qty int not null,
	prc float not null,
	primary key (cn, vn, pn)
) distributed by (cn,vn,pn);
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "sale_pkey" for table "sale"
insert into sale values
  ( 2, 40, 100, '1401-1-1', 1100, 2400),
  ( 1, 10, 200, '1401-3-1', 1, 0),
  ( 3, 40, 200, '1401-4-1', 1, 0),
  ( 1, 20, 100, '1401-5-1', 1, 0),
  ( 1, 30, 300, '1401-5-2', 1, 0),
  ( 1, 50, 400, '1401-6-1', 1, 0),
  ( 2, 50, 400, '1401-6-1', 1, 0),
  ( 1, 30, 500, '1401-6-1', 12, 5),
  ( 3, 30, 500, '1401-6-1', 12, 5),
  ( 3, 30, 600, '1401-6-1', 12, 5),
  ( 4, 40, 700, '1401-6-1', 1, 1),
  ( 4, 40, 800, '1401-6-1', 1, 1);
  
-- TEST
select cname,
rank() over (partition by sale.cn order by vn)
from sale, customer
where sale.cn = customer.cn
order by 1, 2;
    cname     | rank 
--------------+------
 Duncan       |    1
 Duncan       |    2
 Lady Macbeth |    1
 Lady Macbeth |    1
 Lady Macbeth |    3
 Macbeth      |    1
 Macbeth      |    2
 Macbeth      |    3
 Macbeth      |    3
 Macbeth      |    5
 Witches, Inc |    1
 Witches, Inc |    1
(12 rows)

-- CLEANUP
-- start_ignore
drop table if exists customer;
drop table if exists sale;
-- end_ignore
--
-- Optimzier query crashing for logical window with no window functions
--
-- SETUP
create table mpp23240(a int, b int, c int, d int, e int, f int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
-- TEST
select a, b,
       case 1
        when 10 then
          sum(c) over(partition by a)
        when 20 then
          sum(d) over(partition by a)
        else
          5
       end as sum1
from (select * from mpp23240 where f > 10) x;
 a | b | sum1 
---+---+------
(0 rows)

-- CLEANUP
-- start_ignore
drop table mpp23240;
drop schema if exists bfv_olap;
-- end_ignore
-- Test for the bug reported at https://github.com/greenplum-db/gpdb/issues/2236
create table test1 (x int, y int, z double precision);
insert into test1 select a, b, a*10 + b from generate_series(1, 5) a, generate_series(1, 5) b;
select sum(z) over (partition by x) as sumx, sum(z) over (partition by y) as sumy from test1;
 sumx | sumy 
------+------
   65 |  155
   65 |  160
   65 |  165
   65 |  170
   65 |  175
  115 |  155
  115 |  160
  115 |  165
  115 |  170
  115 |  175
  165 |  155
  165 |  160
  165 |  165
  165 |  170
  165 |  175
  215 |  155
  215 |  160
  215 |  165
  215 |  170
  215 |  175
  265 |  155
  265 |  160
  265 |  165
  265 |  170
  265 |  175
(25 rows)

drop table test1;
-- This failed at one point because of an over-zealous syntax check, with
-- "window functions not allowed in WHERE clause" error.
select sum(g) from generate_series(1, 5) g
where g in (
  select rank() over (order by x) from generate_series(1,5) x
);
 sum 
-----
  15
(1 row)

--
-- Test window function with constant PARTITION BY
--
CREATE TABLE testtab (a int4);
insert into testtab values (1), (2);
SELECT count(*) OVER (PARTITION BY 1) AS count FROM testtab;
 count 
-------
     2
     2
(2 rows)

-- Another variant, where the PARTITION BY is not a literal, but the
-- planner can deduce that it's a constant through equivalence classes.
SELECT 1
FROM (
  SELECT a, count(*) OVER (PARTITION BY a) FROM (VALUES (1,1)) AS foo(a)
) AS sup(c, d)
WHERE c = 87 ;
 ?column? 
----------
(0 rows)

--
-- This used to crash or fail an assertion, because 'simple_rte_array' was not
-- copied correctly in WITHIN GROUP planning, causing reference-after-free.
--
CREATE TABLE hundred_parts(a int, b int, c int, d int) DISTRIBUTED RANDOMLY
  PARTITION BY RANGE (a) (START (1) END (100) EVERY (1));
INSERT INTO hundred_parts SELECT g, g/10, g/20, g/25 from generate_series(1,99) g;
SELECT a,
       percentile_disc(1) WITHIN GROUP (ORDER BY b) AS perc100,
       percentile_disc(0.90) WITHIN GROUP (ORDER BY c) AS perc90,
       percentile_disc(0.80) WITHIN GROUP (ORDER BY d) AS perc80,
       percentile_disc(0.70) WITHIN GROUP (ORDER BY b) AS perc70,
       percentile_disc(0.60) WITHIN GROUP (ORDER BY c) AS perc60,
       percentile_disc(0.50) WITHIN GROUP (ORDER BY d) AS perc50,
       percentile_disc(0.40) WITHIN GROUP (ORDER BY b) AS perc40,
       percentile_disc(0.30) WITHIN GROUP (ORDER BY c) AS perc30,
       percentile_disc(0.20) WITHIN GROUP (ORDER BY d) AS perc20,
       percentile_disc(0.10) WITHIN GROUP (ORDER BY b) AS perc10
FROM hundred_parts
GROUP BY a;
 a | perc100 | perc90 | perc80 | perc70 | perc60 | perc50 | perc40 | perc30 | perc20 | perc10 
----+---------+--------+--------+--------+--------+--------+--------+--------+--------+--------
  1 |       0 |      0 |      0 |      0 |      0 |      0 |      0 |      0 |      0 |      0
  2 |       0 |      0 |      0 |      0 |      0 |      0 |      0 |      0 |      0 |      0
  3 |       0 |      0 |      0 |      0 |      0 |      0 |      0 |      0 |      0 |      0
  4 |       0 |      0 |      0 |      0 |      0 |      0 |      0 |      0 |      0 |      0
  5 |       0 |      0 |      0 |      0 |      0 |      0 |      0 |      0 |      0 |      0
  6 |       0 |      0 |      0 |      0 |      0 |      0 |      0 |      0 |      0 |      0
  7 |       0 |      0 |      0 |      0 |      0 |      0 |      0 |      0 |      0 |      0
  8 |       0 |      0 |      0 |      0 |      0 |      0 |      0 |      0 |      0 |      0
  9 |       0 |      0 |      0 |      0 |      0 |      0 |      0 |      0 |      0 |      0
 10 |       1 |      0 |      0 |      1 |      0 |      0 |      1 |      0 |      0 |      1
 11 |       1 |      0 |      0 |      1 |      0 |      0 |      1 |      0 |      0 |      1
 12 |       1 |      0 |      0 |      1 |      0 |      0 |      1 |      0 |      0 |      1
 13 |       1 |      0 |      0 |      1 |      0 |      0 |      1 |      0 |      0 |      1
 14 |       1 |      0 |      0 |      1 |      0 |      0 |      1 |      0 |      0 |      1
 15 |       1 |      0 |      0 |      1 |      0 |      0 |      1 |      0 |      0 |      1
 16 |       1 |      0 |      0 |      1 |      0 |      0 |      1 |      0 |      0 |      1
 17 |       1 |      0 |      0 |      1 |      0 |      0 |      1 |      0 |      0 |      1
 18 |       1 |      0 |      0 |      1 |      0 |      0 |      1 |      0 |      0 |      1
 19 |       1 |      0 |      0 |      1 |      0 |      0 |      1 |      0 |      0 |      1
 20 |       2 |      1 |      0 |      2 |      1 |      0 |      2 |      1 |      0 |      2
 21 |       2 |      1 |      0 |      2 |      1 |      0 |      2 |      1 |      0 |      2
 22 |       2 |      1 |      0 |      2 |      1 |      0 |      2 |      1 |      0 |      2
 23 |       2 |      1 |      0 |      2 |      1 |      0 |      2 |      1 |      0 |      2
 24 |       2 |      1 |      0 |      2 |      1 |      0 |      2 |      1 |      0 |      2
 25 |       2 |      1 |      1 |      2 |      1 |      1 |      2 |      1 |      1 |      2
 26 |       2 |      1 |      1 |      2 |      1 |      1 |      2 |      1 |      1 |      2
 27 |       2 |      1 |      1 |      2 |      1 |      1 |      2 |      1 |      1 |      2
 28 |       2 |      1 |      1 |      2 |      1 |      1 |      2 |      1 |      1 |      2
 29 |       2 |      1 |      1 |      2 |      1 |      1 |      2 |      1 |      1 |      2
 30 |       3 |      1 |      1 |      3 |      1 |      1 |      3 |      1 |      1 |      3
 31 |       3 |      1 |      1 |      3 |      1 |      1 |      3 |      1 |      1 |      3
 32 |       3 |      1 |      1 |      3 |      1 |      1 |      3 |      1 |      1 |      3
 33 |       3 |      1 |      1 |      3 |      1 |      1 |      3 |      1 |      1 |      3
 34 |       3 |      1 |      1 |      3 |      1 |      1 |      3 |      1 |      1 |      3
 35 |       3 |      1 |      1 |      3 |      1 |      1 |      3 |      1 |      1 |      3
 36 |       3 |      1 |      1 |      3 |      1 |      1 |      3 |      1 |      1 |      3
 37 |       3 |      1 |      1 |      3 |      1 |      1 |      3 |      1 |      1 |      3
 38 |       3 |      1 |      1 |      3 |      1 |      1 |      3 |      1 |      1 |      3
 39 |       3 |      1 |      1 |      3 |      1 |      1 |      3 |      1 |      1 |      3
 40 |       4 |      2 |      1 |      4 |      2 |      1 |      4 |      2 |      1 |      4
 41 |       4 |      2 |      1 |      4 |      2 |      1 |      4 |      2 |      1 |      4
 42 |       4 |      2 |      1 |      4 |      2 |      1 |      4 |      2 |      1 |      4
 43 |       4 |      2 |      1 |      4 |      2 |      1 |      4 |      2 |      1 |      4
 44 |       4 |      2 |      1 |      4 |      2 |      1 |      4 |      2 |      1 |      4
 45 |       4 |      2 |      1 |      4 |      2 |      1 |      4 |      2 |      1 |      4
 46 |       4 |      2 |      1 |      4 |      2 |      1 |      4 |      2 |      1 |      4
 47 |       4 |      2 |      1 |      4 |      2 |      1 |      4 |      2 |      1 |      4
 48 |       4 |      2 |      1 |      4 |      2 |      1 |      4 |      2 |      1 |      4
 49 |       4 |      2 |      1 |      4 |      2 |      1 |      4 |      2 |      1 |      4
 50 |       5 |      2 |      2 |      5 |      2 |      2 |      5 |      2 |      2 |      5
 51 |       5 |      2 |      2 |      5 |      2 |      2 |      5 |      2 |      2 |      5
 52 |       5 |      2 |      2 |      5 |      2 |      2 |      5 |      2 |      2 |      5
 53 |       5 |      2 |      2 |      5 |      2 |      2 |      5 |      2 |      2 |      5
 54 |       5 |      2 |      2 |      5 |      2 |      2 |      5 |      2 |      2 |      5
 55 |       5 |      2 |      2 |      5 |      2 |      2 |      5 |      2 |      2 |      5
 56 |       5 |      2 |      2 |      5 |      2 |      2 |      5 |      2 |      2 |      5
 57 |       5 |      2 |      2 |      5 |      2 |      2 |      5 |      2 |      2 |      5
 58 |       5 |      2 |      2 |      5 |      2 |      2 |      5 |      2 |      2 |      5
 59 |       5 |      2 |      2 |      5 |      2 |      2 |      5 |      2 |      2 |      5
 60 |       6 |      3 |      2 |      6 |      3 |      2 |      6 |      3 |      2 |      6
 61 |       6 |      3 |      2 |      6 |      3 |      2 |      6 |      3 |      2 |      6
 62 |       6 |      3 |      2 |      6 |      3 |      2 |      6 |      3 |      2 |      6
 63 |       6 |      3 |      2 |      6 |      3 |      2 |      6 |      3 |      2 |      6
 64 |       6 |      3 |      2 |      6 |      3 |      2 |      6 |      3 |      2 |      6
 65 |       6 |      3 |      2 |      6 |      3 |      2 |      6 |      3 |      2 |      6
 66 |       6 |      3 |      2 |      6 |      3 |      2 |      6 |      3 |      2 |      6
 67 |       6 |      3 |      2 |      6 |      3 |      2 |      6 |      3 |      2 |      6
 68 |       6 |      3 |      2 |      6 |      3 |      2 |      6 |      3 |      2 |      6
 69 |       6 |      3 |      2 |      6 |      3 |      2 |      6 |      3 |      2 |      6
 70 |       7 |      3 |      2 |      7 |      3 |      2 |      7 |      3 |      2 |      7
 71 |       7 |      3 |      2 |      7 |      3 |      2 |      7 |      3 |      2 |      7
 72 |       7 |      3 |      2 |      7 |      3 |      2 |      7 |      3 |      2 |      7
 73 |       7 |      3 |      2 |      7 |      3 |      2 |      7 |      3 |      2 |      7
 74 |       7 |      3 |      2 |      7 |      3 |      2 |      7 |      3 |      2 |      7
 75 |       7 |      3 |      3 |      7 |      3 |      3 |      7 |      3 |      3 |      7
 76 |       7 |      3 |      3 |      7 |      3 |      3 |      7 |      3 |      3 |      7
 77 |       7 |      3 |      3 |      7 |      3 |      3 |      7 |      3 |      3 |      7
 78 |       7 |      3 |      3 |      7 |      3 |      3 |      7 |      3 |      3 |      7
 79 |       7 |      3 |      3 |      7 |      3 |      3 |      7 |      3 |      3 |      7
 80 |       8 |      4 |      3 |      8 |      4 |      3 |      8 |      4 |      3 |      8
 81 |       8 |      4 |      3 |      8 |      4 |      3 |      8 |      4 |      3 |      8
 82 |       8 |      4 |      3 |      8 |      4 |      3 |      8 |      4 |      3 |      8
 83 |       8 |      4 |      3 |      8 |      4 |      3 |      8 |      4 |      3 |      8
 84 |       8 |      4 |      3 |      8 |      4 |      3 |      8 |      4 |      3 |      8
 85 |       8 |      4 |      3 |      8 |      4 |      3 |      8 |      4 |      3 |      8
 86 |       8 |      4 |      3 |      8 |      4 |      3 |      8 |      4 |      3 |      8
 87 |       8 |      4 |      3 |      8 |      4 |      3 |      8 |      4 |      3 |      8
 88 |       8 |      4 |      3 |      8 |      4 |      3 |      8 |      4 |      3 |      8
 89 |       8 |      4 |      3 |      8 |      4 |      3 |      8 |      4 |      3 |      8
 90 |       9 |      4 |      3 |      9 |      4 |      3 |      9 |      4 |      3 |      9
 91 |       9 |      4 |      3 |      9 |      4 |      3 |      9 |      4 |      3 |      9
 92 |       9 |      4 |      3 |      9 |      4 |      3 |      9 |      4 |      3 |      9
 93 |       9 |      4 |      3 |      9 |      4 |      3 |      9 |      4 |      3 |      9
 94 |       9 |      4 |      3 |      9 |      4 |      3 |      9 |      4 |      3 |      9
 95 |       9 |      4 |      3 |      9 |      4 |      3 |      9 |      4 |      3 |      9
 96 |       9 |      4 |      3 |      9 |      4 |      3 |      9 |      4 |      3 |      9
 97 |       9 |      4 |      3 |      9 |      4 |      3 |      9 |      4 |      3 |      9
 98 |       9 |      4 |      3 |      9 |      4 |      3 |      9 |      4 |      3 |      9
 99 |       9 |      4 |      3 |      9 |      4 |      3 |      9 |      4 |      3 |      9
(99 rows)

-- CLEANUP
-- start_ignore
drop schema bfv_olap cascade;
-- end_ignore
