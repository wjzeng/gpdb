test: ao_partition_lock
test: modify_table_data_corrupt
test: setup
# this case contains fault injection, must be put in a separate test group
test: terminate_in_gang_creation

test: pt_io_in_progress_deadlock
test: pg_terminate_backend
test: deadlock_under_entry_db_singleton
test: starve_case
test: commit_transaction_block_checkpoint
test: pg_views_concurrent_drop
test: resource_queue
test: alter_blocks_for_update_and_viceversa
test: reader_waits_for_lock
test: drop_rename concurrent_schema_drop vacuum_drop_phase_ao
test: instr_in_shmem_setup
test: instr_in_shmem_terminate
test: instr_in_shmem_cleanup
test: vacuum_full_recently_dead_tuple_due_to_distributed_snapshot
test: resync_xlog_hints
test: invalidated_toast_index
test: dml_on_root_locks_all_parts
test: dynamic_index_scan
test: select_for_update

# Tests on Append-Optimized tables (row-oriented).
test: uao/alter_while_vacuum_row
test: uao/alter_while_vacuum2_row
test: uao/compaction_full_stats_row
test: uao/compaction_utility_row
test: uao/compaction_utility_insert_row
test: uao/cursor_before_delete_row
test: uao/cursor_before_deletevacuum_row
test: uao/cursor_before_update_row
test: uao/cursor_withhold_row
test: uao/cursor_withhold2_row
test: uao/delete_while_vacuum_row
test: uao/insert_policy_row
test: uao/insert_while_vacuum_row
test: uao/max_concurrency_row
test: uao/max_concurrency2_row
test: uao/modcount_row
test: uao/modcount_vacuum_row
test: uao/parallel_delete_row
test: uao/parallel_update_row
test: uao/parallel_update_readcommitted_row
test: uao/phantom_reads_row
test: uao/phantom_reads_serializable_row
test: uao/phantom_reads_delete_row
test: uao/phantom_reads_delete_serializable_row
test: uao/phantom_reads_update_row
test: uao/phantom_reads_update_serializable_row
test: uao/select_after_vacuum_row
test: uao/select_after_vacuum_serializable_row
test: uao/select_before_vacuum_row
test: uao/select_while_delete_row
test: uao/select_while_full_vacuum_row
test: uao/select_while_vacuum_row
test: uao/select_while_vacuum_serializable_row
test: uao/select_while_vacuum_serializable2_row
test: uao/selectinsert_while_vacuum_row
test: uao/selectinsertupdate_while_vacuum_row
test: uao/selectupdate_while_vacuum_row
test: uao/update_while_vacuum_row
test: uao/vacuum_self_serializable_row
test: uao/vacuum_self_serializable2_row
test: uao/vacuum_self_serializable3_row
test: uao/vacuum_while_insert_row
test: uao/vacuum_while_vacuum_row
test: uao/vacuum_cleanup_row
test: uao/insert_should_not_use_awaiting_drop_row
test: reorganize_after_ao_vacuum_skip_drop truncate_after_ao_vacuum_skip_drop

# Tests on Append-Optimized tables (column-oriented).
test: uao/alter_while_vacuum_column
test: uao/alter_while_vacuum2_column
test: uao/compaction_full_stats_column
test: uao/compaction_utility_column
test: uao/compaction_utility_insert_column
test: uao/cursor_before_delete_column
test: uao/cursor_before_deletevacuum_column
test: uao/cursor_before_update_column
test: uao/cursor_withhold_column
test: uao/cursor_withhold2_column
test: uao/delete_while_vacuum_column
test: uao/insert_policy_column
test: uao/insert_while_vacuum_column
test: uao/max_concurrency_column
test: uao/max_concurrency2_column
test: uao/modcount_column
test: uao/modcount_vacuum_column
test: uao/parallel_delete_column
test: uao/parallel_update_column
test: uao/parallel_update_readcommitted_column
test: uao/phantom_reads_column
test: uao/phantom_reads_serializable_column
test: uao/phantom_reads_delete_column
test: uao/phantom_reads_delete_serializable_column
test: uao/phantom_reads_update_column
test: uao/phantom_reads_update_serializable_column
test: uao/select_after_vacuum_column
test: uao/select_after_vacuum_serializable_column
test: uao/select_before_vacuum_column
test: uao/select_while_delete_column
test: uao/select_while_full_vacuum_column
test: uao/select_while_vacuum_column
test: uao/select_while_vacuum_serializable_column
test: uao/select_while_vacuum_serializable2_column
test: uao/selectinsert_while_vacuum_column
test: uao/selectinsertupdate_while_vacuum_column
test: uao/selectupdate_while_vacuum_column
test: uao/update_while_vacuum_column
test: uao/vacuum_self_serializable_column
test: uao/vacuum_self_serializable2_column
test: uao/vacuum_self_serializable3_column
test: uao/vacuum_while_insert_column
test: uao/vacuum_while_vacuum_column
test: uao/vacuum_cleanup_column
test: uao/insert_should_not_use_awaiting_drop_column
test: add_column_after_vacuum_skip_drop_column
test: vacuum_after_vacuum_skip_drop_column

# Tests for packcore, will use the coredumps generated in previous tests.
#
# On 5X branch no test will generate a coredump unless on exceptions, in such a
# case we will only make basic verifications on the packcore command, but once
# a coredump is generated we will run the full packcore test automatically.
test: packcore

# Cancel test
test: cancel_plpython

test: distributed_transactions
